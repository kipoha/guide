"use strict";(self.webpackChunkdisnake_guide=self.webpackChunkdisnake_guide||[]).push([[898],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function d(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),h=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):d(d({},t),e)),a},l=function(e){var t=h(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),p=h(a),u=r,m=p["".concat(s,".").concat(u)]||p[u]||c[u]||i;return a?n.createElement(m,d(d({ref:t},l),{},{components:a})):n.createElement(m,d({ref:t},l))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,d=new Array(i);d[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,d[1]=o;for(var h=2;h<i;h++)d[h]=a[h];return n.createElement.apply(null,d)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},3856:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>h});var n=a(7462),r=(a(7294),a(3905));const i={description:"An extensive article on methods and events to be used with Discord Threads.",keywords:["disnake","bot","guide","tutorial","thread","python"]},d="Threads",o={unversionedId:"popular-topics/threads",id:"popular-topics/threads",title:"Threads",description:"An extensive article on methods and events to be used with Discord Threads.",source:"@site/docs/popular-topics/threads.mdx",sourceDirName:"popular-topics",slug:"/popular-topics/threads",permalink:"/popular-topics/threads",draft:!1,editUrl:"https://github.com/DisnakeDev/guide/edit/main/guide/docs/popular-topics/threads.mdx",tags:[],version:"current",lastUpdatedBy:"Victor",lastUpdatedAt:1682950341,formattedLastUpdatedAt:"May 1, 2023",frontMatter:{description:"An extensive article on methods and events to be used with Discord Threads.",keywords:["disnake","bot","guide","tutorial","thread","python"]},sidebar:"guideSidebar",previous:{title:"Popular Topics",permalink:"/popular-topics"},next:{title:"Embeds",permalink:"/popular-topics/embeds"}},s={},h=[{value:"Thread-related methods",id:"thread-related-methods",level:2},{value:"Creating and deleting threads",id:"creating-and-deleting-threads",level:3},{value:"Joining and leaving threads",id:"joining-and-leaving-threads",level:3},{value:"Archiving, unarchiving and locking threads",id:"archiving-unarchiving-and-locking-threads",level:3},{value:"Public and private threads",id:"public-and-private-threads",level:3},{value:"Thread-related events",id:"thread-related-events",level:2}],l=(c="DocsLink",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var c;const p={toc:h};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"threads"},"Threads"),(0,r.kt)("p",null,"Threads are ",(0,r.kt)(l,{reference:"disnake.abc.Messageable",mdxType:"DocsLink"},"Messageable")," objects, and can be thought of as\nsub-channels inside existing channels. They allow organization of multiple topics in a channel by temporarily giving\nthem a separate space."),(0,r.kt)("h2",{id:"thread-related-methods"},"Thread-related methods"),(0,r.kt)("h3",{id:"creating-and-deleting-threads"},"Creating and deleting threads"),(0,r.kt)("p",null,"A thread can be created by using the ",(0,r.kt)(l,{reference:"disnake.TextChannel.create_thread",mdxType:"DocsLink"},"create_thread()"),"\nmethod on a ",(0,r.kt)(l,{reference:"disnake.Message",mdxType:"DocsLink"},"Message")," or ",(0,r.kt)(l,{reference:"disnake.TextChannel",mdxType:"DocsLink"},"TextChannel")," object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="threads.py"',title:'"threads.py"'},"# Using the 'Message' object\nmessage = channel.fetch_message(1234567890)\nawait message.create_thread(\n    name=\"This message will act as the thread's starting message.\",\n    auto_archive_duration=60,\n)\n\n# Using the 'TextChannel' object\nchannel = bot.get_channel(...)\nawait channel.create_thread(\n    name=\"This thread requires a starting message to be specified.\",\n    auto_archive_duration=60,\n    message=message,\n)\n")),(0,r.kt)("p",null,"In order to delete a thread, you can use the ",(0,r.kt)(l,{reference:"disnake.Thread.delete",mdxType:"DocsLink"},"delete()")," method on\nthe ",(0,r.kt)(l,{reference:"disnake.Thread",mdxType:"DocsLink"},"Thread")," object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="threads.py"',title:'"threads.py"'},"thread = channel.get_thread(...)  # You can also use bot.get_channel(...)\n\nawait thread.delete()\n")),(0,r.kt)("h3",{id:"joining-and-leaving-threads"},"Joining and leaving threads"),(0,r.kt)("p",null,"Both joining and leaving a thread require you to have a ",(0,r.kt)(l,{reference:"disnake.Thread",mdxType:"DocsLink"},"Thread")," object,\non which you can use the ",(0,r.kt)(l,{reference:"disnake.Thread.join",mdxType:"DocsLink"},"join()")," and ",(0,r.kt)(l,{reference:"disnake.Thread.leave",mdxType:"DocsLink"},"leave()")," methods for the respective action."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="threads.py"',title:'"threads.py"'},"thread = channel.get_thread(...)  # You can also use bot.get_channel(...)\n\n# Joining a thread.\nawait thread.join()\n\n# Leaving a thread.\nawait thread.leave()\n")),(0,r.kt)("p",null,"It is recommended to use a ",(0,r.kt)("inlineCode",{parentName:"p"},"try-except")," loop here, in case that the thread is not joinable by the bot user; this can be\ndue to missing permissions."),(0,r.kt)("h3",{id:"archiving-unarchiving-and-locking-threads"},"Archiving, unarchiving and locking threads"),(0,r.kt)("p",null,'Archiving a thread essentially makes it "read-only" for non-moderators - where they can view older messages, but not\nsend messages themselves. Locked threads can only be unarchived by users who have the ',(0,r.kt)("inlineCode",{parentName:"p"},"manage_threads")," permission."),(0,r.kt)("p",null,"Threads have an ",(0,r.kt)("strong",{parentName:"p"},"auto-archive duration")," - a period of time after which the thread is archived automatically without\nbeing configured by a moderator. This duration can also be set by a bot user while creating or editing a thread."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="threads.py"',title:'"threads.py"'},"thread = channel.get_thread(...)\n\nawait thread.edit(auto_archive_duration=60)\n")),(0,r.kt)("p",null,"Configuring a thread to be archived, unarchived or locked can be done using the ",(0,r.kt)(l,{reference:"disnake.Thread.edit",mdxType:"DocsLink"},"edit()")," method, via the ",(0,r.kt)("inlineCode",{parentName:"p"},"archived")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"locked")," parameters. Both of\nthese attributes accept a boolean value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="threads.py"',title:'"threads.py"'},"thread = channel.get_thread(...)\n\n# Archiving a thread\nawait thread.edit(archived=True)  # Set to 'False', to unarchive the thread\n\n# Locking a thread\nawait thread.edit(locked=True)\n")),(0,r.kt)("h3",{id:"public-and-private-threads"},"Public and private threads"),(0,r.kt)("p",null,"Public threads are accessible to all members that can view the thread's parent channel. Such threads can be created\nusing the ",(0,r.kt)(l,{reference:"disnake.TextChannel.create_thread",mdxType:"DocsLink"},"create_thread()")," method, as covered in\n",(0,r.kt)("a",{parentName:"p",href:"#creating-and-deleting-threads"},"a previous section"),"."),(0,r.kt)("p",null,"Private threads are those which are only accessible to moderators and the members invited by the thread creator. A\nprivate thread can be created by specifying the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," in the ",(0,r.kt)(l,{reference:"disnake.TextChannel",mdxType:"DocsLink"},"create_thread()")," method as ",(0,r.kt)(l,{reference:"disnake.ChannelType.private_thread",mdxType:"DocsLink"},"private_thread"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="threads.py" {6}',title:'"threads.py"',"{6}":!0},'channel = bot.get_channel(...)\n\nawait channel.create_thread(\n    name="Thread Title",\n    auto_archive_duration=60,\n    type=disnake.ChannelType.private_thread,\n)\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"A private thread can only be created on a ",(0,r.kt)(l,{reference:"disnake.TextChannel",mdxType:"DocsLink"},"TextChannel")," object. The\ntype that can be specified under ",(0,r.kt)(l,{reference:"disnake.TextChannel.create_thread",mdxType:"DocsLink"},"create_thread()")," can\nbe ",(0,r.kt)("inlineCode",{parentName:"p"},"public_thread"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"private_thread")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"news_thread"),".")),(0,r.kt)("h2",{id:"thread-related-events"},"Thread-related events"),(0,r.kt)("p",null,"Threads introduce some new gateway events, which are listed below. You can find more information on these\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.disnake.dev/en/stable/api.html#disnake.on_thread_join"},"in the documentation"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(l,{reference:"disnake.on_thread_join",mdxType:"DocsLink"},"on_thread_join")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(l,{reference:"disnake.on_thread_remove",mdxType:"DocsLink"},"on_thread_remove")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(l,{reference:"disnake.on_thread_member_join",mdxType:"DocsLink"},"on_thread_member_join")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(l,{reference:"disnake.on_thread_member_remove",mdxType:"DocsLink"},"on_thread_member_remove")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(l,{reference:"disnake.on_thread_delete",mdxType:"DocsLink"},"on_thread_delete")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(l,{reference:"disnake.on_thread_update",mdxType:"DocsLink"},"on_thread_update"))))}u.isMDXComponent=!0}}]);