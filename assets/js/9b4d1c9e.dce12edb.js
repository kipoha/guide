"use strict";(self.webpackChunkdisnake_guide=self.webpackChunkdisnake_guide||[]).push([[97],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=o.createContext({}),l=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=l(e.components);return o.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,d=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=l(n),u=a,h=p["".concat(d,".").concat(u)]||p[u]||c[u]||s;return n?o.createElement(h,r(r({ref:t},m),{},{components:n})):o.createElement(h,r({ref:t},m))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=p;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var l=2;l<s;l++)r[l]=n[l];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},856:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var o=n(7462),a=(n(7294),n(3905));const s={description:"A list of FAQs regarding the 'commands', 'tasks' and 'ui' extensions.",keywords:["disnake","bot","guide","tutorial","python","extensions"]},r="Extensions",i={unversionedId:"faq/extensions",id:"faq/extensions",title:"Extensions",description:"A list of FAQs regarding the 'commands', 'tasks' and 'ui' extensions.",source:"@site/docs/faq/extensions.mdx",sourceDirName:"faq",slug:"/faq/extensions",permalink:"/faq/extensions",draft:!1,editUrl:"https://github.com/DisnakeDev/guide/edit/main/guide/docs/faq/extensions.mdx",tags:[],version:"current",lastUpdatedBy:"Victor",lastUpdatedAt:1682950341,formattedLastUpdatedAt:"May 1, 2023",frontMatter:{description:"A list of FAQs regarding the 'commands', 'tasks' and 'ui' extensions.",keywords:["disnake","bot","guide","tutorial","python","extensions"]},sidebar:"guideSidebar",previous:{title:"Coroutines",permalink:"/faq/coroutines"},next:{title:"Good practices",permalink:"/faq/good-practices"}},d={},l=[{value:"Why does <code>on_message</code> make my commands stop working?",id:"why-does-on_message-make-my-commands-stop-working",level:3},{value:"Why do my arguments require quotes?",id:"why-do-my-arguments-require-quotes",level:3},{value:"How do I get the original <code>message</code>?",id:"how-do-i-get-the-original-message",level:3},{value:"How do I make a subcommand?",id:"how-do-i-make-a-subcommand",level:3},{value:"Which components can I use with modals?",id:"which-components-can-i-use-with-modals",level:3},{value:"Do modals support autocomplete?",id:"do-modals-support-autocomplete",level:3}],m=(c="DocsLink",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)});var c;const p={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"extensions"},"Extensions"),(0,a.kt)("p",null,"Questions regarding ",(0,a.kt)("inlineCode",{parentName:"p"},"disnake.ext.commands"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"disnake.ext.tasks")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"disnake.ui")," belong here."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"This content has been taken directly from the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.disnake.dev/en/stable/faq.html"},"documentation"),", and inherited from ",(0,a.kt)("inlineCode",{parentName:"p"},"discord.py"),". It will most likely be rewritten in the future.")),(0,a.kt)("h3",{id:"why-does-on_message-make-my-commands-stop-working"},"Why does ",(0,a.kt)("inlineCode",{parentName:"h3"},"on_message")," make my commands stop working?"),(0,a.kt)("p",null,"Overriding the default provided ",(0,a.kt)("inlineCode",{parentName:"p"},"on_message")," forbids any extra commands from running. To fix this, add a\n",(0,a.kt)("inlineCode",{parentName:"p"},"bot.process_commands(message)")," line at the end of your ",(0,a.kt)("inlineCode",{parentName:"p"},"on_message"),". For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@bot.event\nasync def on_message(message):\n    # Do some extra stuff here\n\n    await bot.process_commands(message)\n")),(0,a.kt)("p",null,"Alternatively, you can place your ",(0,a.kt)("inlineCode",{parentName:"p"},"on_message")," logic into a ",(0,a.kt)("strong",{parentName:"p"},"listener"),". In this setup, you should not\nmanually call ",(0,a.kt)("inlineCode",{parentName:"p"},"bot.process_commands()"),". This also allows you to do multiple things asynchronously in response\nto a message. Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'@bot.listen("on_message")\nasync def whatever_you_want_to_call_it(message):\n    await do_stuff_here()\n    # Do not process commands here\n')),(0,a.kt)("h3",{id:"why-do-my-arguments-require-quotes"},"Why do my arguments require quotes?"),(0,a.kt)("p",null,"In a simple command defined as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@bot.command()\nasync def echo(ctx, message: str):\n    await ctx.send(message)\n")),(0,a.kt)("p",null,"Calling it via ",(0,a.kt)("inlineCode",{parentName:"p"},"?echo a b c")," will only fetch the first argument and disregard the rest. To fix this you should either call\nit via ",(0,a.kt)("inlineCode",{parentName:"p"},'?echo "a b c"'),' or change the signature to have "consume rest" behaviour. Example:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@bot.command()\nasync def echo(ctx, *, message: str):\n    await ctx.send(message)\n")),(0,a.kt)("p",null,"This will allow you to use ",(0,a.kt)("inlineCode",{parentName:"p"},"?echo a b c")," without needing the quotes."),(0,a.kt)("h3",{id:"how-do-i-get-the-original-message"},"How do I get the original ",(0,a.kt)("inlineCode",{parentName:"h3"},"message"),"?"),(0,a.kt)("p",null,"The ",(0,a.kt)(m,{ext:"commands",reference:"disnake.ext.commands.Context",mdxType:"DocsLink"})," contains an attribute, ",(0,a.kt)(m,{ext:"commands",reference:"disnake.ext.commands.Context.message",mdxType:"DocsLink"},"message")," to get the original\nmessage."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'@bot.command()\nasync def length(ctx):\n    await ctx.send(f"Your message is {len(ctx.message.content)} characters long.")\n')),(0,a.kt)("h3",{id:"how-do-i-make-a-subcommand"},"How do I make a subcommand?"),(0,a.kt)("p",null,"Use the ",(0,a.kt)(m,{ext:"commands",reference:"disnake.ext.commands.group",mdxType:"DocsLink"},"group()")," decorator. This will transform the callback into a ",(0,a.kt)(m,{ext:"commands",reference:"disnake.ext.commands.Group",mdxType:"DocsLink"}),' which will allow you to add commands into\nthe group operating as "subcommands". These groups can be arbitrarily nested as well.'),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'@bot.group()\nasync def git(ctx):\n    if ctx.invoked_subcommand is None:\n        await ctx.send("Invalid git command passed...")\n\n\n@git.command()\nasync def push(ctx, remote: str, branch: str):\n    await ctx.send(f"Pushing to {remote} {branch}.")\n')),(0,a.kt)("p",null,"This could then be used as ",(0,a.kt)("inlineCode",{parentName:"p"},"?git push origin master"),"."),(0,a.kt)("h3",{id:"which-components-can-i-use-with-modals"},"Which components can I use with modals?"),(0,a.kt)("p",null,"The only component that can currently be used with modals is ",(0,a.kt)(m,{reference:"disnake.ui.TextInput",mdxType:"DocsLink"},"TextInput"),". The API does not have integration for any other inputs as of now."),(0,a.kt)("h3",{id:"do-modals-support-autocomplete"},"Do modals support autocomplete?"),(0,a.kt)("p",null,"Modals (or text inputs) do not support autocomplete. This is a Discord limitation."))}u.isMDXComponent=!0}}]);