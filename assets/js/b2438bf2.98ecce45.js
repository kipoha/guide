"use strict";(self.webpackChunkdisnake_guide=self.webpackChunkdisnake_guide||[]).push([[12],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>u});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=a.createContext({}),l=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=l(e.components);return a.createElement(d.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,d=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),p=l(t),u=o,h=p["".concat(d,".").concat(u)]||p[u]||c[u]||s;return t?a.createElement(h,i(i({ref:n},m),{},{components:t})):a.createElement(h,i({ref:n},m))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,i=new Array(s);i[0]=p;var r={};for(var d in n)hasOwnProperty.call(n,d)&&(r[d]=n[d]);r.originalType=e,r.mdxType="string"==typeof e?e:o,i[1]=r;for(var l=2;l<s;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6872:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>y,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var a=t(7462),o=(t(7294),t(3905));const s={description:"They can be accessed via the textbox, and return the values the user submitted with the command."},i="Slash Commands",r={unversionedId:"interactions/slash-commands",id:"interactions/slash-commands",title:"Slash Commands",description:"They can be accessed via the textbox, and return the values the user submitted with the command.",source:"@site/docs/interactions/slash-commands.mdx",sourceDirName:"interactions",slug:"/interactions/slash-commands",permalink:"/interactions/slash-commands",draft:!1,editUrl:"https://github.com/DisnakeDev/guide/edit/main/guide/docs/interactions/slash-commands.mdx",tags:[],version:"current",lastUpdatedBy:"Victor",lastUpdatedAt:1682950341,formattedLastUpdatedAt:"May 1, 2023",frontMatter:{description:"They can be accessed via the textbox, and return the values the user submitted with the command."},sidebar:"guideSidebar",previous:{title:"Interactions",permalink:"/interactions"},next:{title:"Buttons",permalink:"/interactions/buttons"}},d={},l=[{value:"Defining slash commands",id:"defining-slash-commands",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Registering commands",id:"registering-commands",level:2},{value:"Global commands",id:"global-commands",level:3},{value:"Guild commands",id:"guild-commands",level:3},{value:"Responding to commands",id:"responding",level:2},{value:"Sending responses",id:"response",level:3},{value:"Followups",id:"followups",level:3}],m=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",n)},c=m("DocsLink"),p=m("DiscordMessages"),u=m("DiscordMessage"),h=m("DiscordInteraction"),k=m("DiscordMarkdown"),g=m("DiscordMention"),f={toc:l};function y(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"slash-commands"},"Slash Commands"),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},"slash command")," is one of the types of client-integrated interactions a bot can create. Unlike prefix commands, these do not require the message content intent."),(0,o.kt)("p",null,"This section will go in-depth on the creation, types and handling of slash commands with ",(0,o.kt)("inlineCode",{parentName:"p"},"disnake"),"."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"A bot needs to be authorized with the ",(0,o.kt)("inlineCode",{parentName:"p"},"applications.commands")," scope in order to create slash commands in a guild. We recommend adding this scope to your bot invite links.")),(0,o.kt)("h2",{id:"defining-slash-commands"},"Defining slash commands"),(0,o.kt)("p",null,"To create a slash command, use the ",(0,o.kt)(c,{ext:"commands",reference:"disnake.ext.commands.Bot.slash_command",mdxType:"DocsLink"},"@Bot.slash_command")," decorator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'@bot.slash_command(\n    name="ping",\n    description="Returns websocket latency.",\n)\nasync def ping(inter: disnake.ApplicationCommandInteraction):\n    ...\n')),(0,o.kt)("br",null),(0,o.kt)(p,{mdxType:"DiscordMessages"},(0,o.kt)(u,{profile:"bot",mdxType:"DiscordMessage"},(0,o.kt)("div",{slot:"interactions"},(0,o.kt)(h,{profile:"user",command:"true",mdxType:"DiscordInteraction"},"ping")),"Latency: ",(0,o.kt)(k,{mdxType:"DiscordMarkdown"},"`42ms`"),"!")),(0,o.kt)("br",null),(0,o.kt)("p",null,"If you're using cogs, the ",(0,o.kt)(c,{ext:"commands",reference:"disnake.ext.commands.slash_command",mdxType:"DocsLink"},"@commands.slash_command")," decorator should be used instead."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class Meta(commands.Cog):\n    """Meta commands."""\n\n    @commands.slash_command(\n        name="ping",\n        description="Returns websocket latency.",\n    )\n    async def ping(self, inter: disnake.ApplicationCommandInteraction):\n        ...\n')),(0,o.kt)("h3",{id:"parameters"},"Parameters"),(0,o.kt)("p",null,"While some commands can exist without arguments, most commands will need to take user input to be useful. Adding an option is as simple as defining a parameter on the callback."),(0,o.kt)("p",null,"Here's an example of a command with one integer option (without a description):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'@bot.slash_command(description="Multiplies the number by 7")\nasync def multiply(inter, number: int):\n    await inter.response.send_message(number * 7)\n')),(0,o.kt)("p",null,"To make a parameter optional, provide a default value for the option:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'@bot.slash_command(description="Multiplies the number by a multiplier")\nasync def multiply(inter, number: int, multiplier: int = 7):\n    await inter.response.send_message(number * multiplier)\n')),(0,o.kt)("h2",{id:"registering-commands"},"Registering commands"),(0,o.kt)("p",null,'Unlike prefix commands, slash commands must be registered with Discord first, otherwise they won\'t show up if you press "/".\nBy default, the library registers and updates your slash commands automatically.\nIt does so on bot start or when cogs are loaded, unloaded, or reloaded.'),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The library avoids unnecessary API requests during this process.\nIf the registered commands match the commands in your code, no API requests are made.\nOtherwise only one bulk overwrite request is done.")),(0,o.kt)("p",null,"If you want to disable the automatic registration, set the ",(0,o.kt)("inlineCode",{parentName:"p"},"sync_commands")," parameter of ",(0,o.kt)("inlineCode",{parentName:"p"},"commands.Bot")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"False"),".\nIf you want to see how exactly the list of registered commands changes, set the ",(0,o.kt)("inlineCode",{parentName:"p"},"sync_commands_debug")," parameter to ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'bot = commands.Bot("!", sync_commands_debug=True)\n')),(0,o.kt)("p",null,"It will print (or use the logger, if enabled) which commands were added, edited, deleted or left untouched."),(0,o.kt)("h3",{id:"global-commands"},"Global commands"),(0,o.kt)("p",null,"Global slash commands are visible everywhere, including your bot DMs.\nIf you don't specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"test_guilds")," parameter of ",(0,o.kt)("inlineCode",{parentName:"p"},"commands.Bot"),", all your slash commands are global by default."),(0,o.kt)("p",null,"Global commands are visible and usable on most devices right away."),(0,o.kt)("h3",{id:"guild-commands"},"Guild commands"),(0,o.kt)("p",null,"If you specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"test_guilds")," parameter of ",(0,o.kt)("inlineCode",{parentName:"p"},"commands.Bot"),", all slash commands in your code are no longer global.\nThe following code will register all slash commands only in 2 guilds:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'bot = commands.Bot("!", test_guilds=[123456789, 987654321])  # guild IDs\n')),(0,o.kt)("p",null,"If you want to keep some of your slash commands global and make some of them local, specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"guild_ids")," parameter of ",(0,o.kt)("inlineCode",{parentName:"p"},"@bot.slash_command()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'bot = commands.Bot("!")\n\n\n@bot.slash_command()\nasync def global_command(inter):\n    """This command is visible everywhere"""\n    ...\n\n\n@bot.slash_command(guild_ids=[123456789])\nasync def local_command(inter):\n    """This command is visible in one guild"""\n    ...\n')),(0,o.kt)("h2",{id:"responding"},"Responding to commands"),(0,o.kt)("h3",{id:"response"},"Sending responses"),(0,o.kt)("p",null,"The ",(0,o.kt)(c,{reference:"disnake.Interaction.response",mdxType:"DocsLink"},"response")," attribute returns a ",(0,o.kt)(c,{reference:"disnake.InteractionResponse",mdxType:"DocsLink"},"InteractionResponse"),"\ninstance that has four ways of responding to an ApplicationCommandInteraction.\nA response can ",(0,o.kt)("b",null,"only be done once"),".\nIf you want to send secondary messages, consider using a ",(0,o.kt)(c,{reference:"disnake.Interaction.followup",mdxType:"DocsLink"},"followup")," webhook instead."),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"An interaction can only be responded to ",(0,o.kt)("strong",{parentName:"p"},"once"),". After a response is made, ",(0,o.kt)("strong",{parentName:"p"},"no more responses can be made.")," See the ",(0,o.kt)("a",{parentName:"p",href:"#followup"},"followup")," object for sending messages after responding.")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)(c,{reference:"disnake.InteractionResponse.send_message",mdxType:"DocsLink"},"send_message")," - Sends response message."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)(c,{reference:"disnake.InteractionResponse.edit_message",mdxType:"DocsLink"},"edit_message")," - Edits message, for example in component or component+modal interactions. Cannot be used with application commands."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)(c,{reference:"disnake.InteractionResponse.defer",mdxType:"DocsLink"},"defer")," - Defers the interaction."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)(c,{reference:"disnake.InteractionResponse.send_modal",mdxType:"DocsLink"},"send_modal")," - Sends a ",(0,o.kt)(c,{reference:"disnake.ui.Modal",mdxType:"DocsLink"},"Modal")," as a response.")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If you're going to run long processes (more than 3 seconds) before responding, you should first ",(0,o.kt)(c,{reference:"disnake.InteractionResponse.defer",mdxType:"DocsLink"},"defer")," the interaction,\nas interactions expire after 3 seconds and later responses will fail.\nDeferring an interaction response shows a loading indicator to the user, and gives you more time to prepare a complete response.\nOnce your response is ready, you can edit the original response using the ",(0,o.kt)(c,{reference:"disnake.Interaction.edit_original_response",mdxType:"DocsLink"},"Interaction.edit_original_response")," method.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="example.py"',title:'"example.py"'},'@bot.slash_command()\nasync def ping(inter: ApplicationCommandInteraction):\n    await inter.response.send_message("Pong!")\n\n\n@bot.slash_command()\nasync def defer(inter: ApplicationCommandInteraction):\n    await inter.response.defer()\n    await asyncio.sleep(10)\n    await inter.edit_original_response(content="The wait is over, my comrades!")\n')),(0,o.kt)("h3",{id:"followups"},"Followups"),(0,o.kt)("p",null,"Followups are a way to send a message after responding. There are two important restrictions for when a followup can be used:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The interaction must have been responded to (see ",(0,o.kt)("a",{parentName:"li",href:"#responses"},"responding"),")."),(0,o.kt)("li",{parentName:"ul"},"The interaction must not be expired (i.e. hasn't exceeded the 15 minute limit).\nChecking if an interaction has expired can be done with ",(0,o.kt)(c,{reference:"disnake.ApplicationCommandInteraction.is_expired",mdxType:"DocsLink"},"ApplicationCommandInteraction.is_expired"),".")),(0,o.kt)("p",null,"At their core, followups are simply ",(0,o.kt)(c,{reference:"disnake.Webhook",mdxType:"DocsLink"},"Webhook")," instances. The only special thing about them is that the ",(0,o.kt)("inlineCode",{parentName:"p"},"wait")," parameter is treated as if it is always set to ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),"."),(0,o.kt)("p",null,"Take this as an example of how followups could be used:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'@bot.slash_command()\nasync def timer(inter: disnake.ApplicationCommandInteraction, seconds: int):\n    await inter.response.send_message(f"Setting a timer for {seconds} seconds.")\n    await asyncio.sleep(seconds)\n    await inter.followup.send(f"{inter.author.mention}, your timer expired!")\n')),(0,o.kt)("br",null),(0,o.kt)(p,{mdxType:"DiscordMessages"},(0,o.kt)(u,{profile:"bot",mdxType:"DiscordMessage"},(0,o.kt)("div",{slot:"interactions"},(0,o.kt)(h,{profile:"user",command:"true",mdxType:"DiscordInteraction"},"timer")),"Setting a timer for 30 seconds."),(0,o.kt)(u,{profile:"bot",mdxType:"DiscordMessage"},(0,o.kt)("div",{slot:"interactions"},(0,o.kt)(h,{profile:"bot",mdxType:"DiscordInteraction"},"Setting a timer for 30 seconds.")),(0,o.kt)(g,{profile:"user",mdxType:"DiscordMention"}),", your timer expired!")),(0,o.kt)("br",null))}y.isMDXComponent=!0}}]);